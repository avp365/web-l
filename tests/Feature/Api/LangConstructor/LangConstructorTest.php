<?php

namespace Tests\Feature\Api\LangConstructor;

use App\Models\Account;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\Generators\LangConstructorTypeGenerator;
use Tests\Generators\LangConstructorGenerator;
use Tests\Generators\AccountGenerator;
use Tests\Generators\UserGenerator;
use Tests\TestCase;
use Illuminate\Support\Str;

class LangConstructorTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected $account;
    protected $user;
    protected $langConstructor;
    protected $langConstructorType;
    protected $token;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->token = Str::random(60);

        $this->account = AccountGenerator::createAccountAdminUser();
        $this->user = UserGenerator::createUser(['account_id' => $this->account->id, 'api_token' => hash('sha256', $this->token)]);

        $this->langConstructorType = LangConstructorTypeGenerator::createConstructorType(['created_account_id' => $this->account->id]);

        LangConstructorGenerator::createConstructor(['type_code' => $this->langConstructorType->code, 'created_account_id' => $this->account->id]);
        LangConstructorGenerator::createConstructor(['type_code' => $this->langConstructorType->code, 'created_account_id' => $this->account->id]);

        $this->langConstructor = LangConstructorGenerator::createConstructor(['type_code' => $this->langConstructorType->code, 'created_account_id' => $this->account->id]);

    }


    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function testShowAllConstructions()
    {

        $response = $this->getJson(route('api.constructions.index', ['api_token' => $this->token]));
        $response->assertStatus(200)->assertJsonCount(3, 'data');

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

//    public function testStoreConstructions()
//    {
//
//        $langConstructor = LangConstructorGenerator::makeConstructor(['type_code' => $this->langConstructorType->code]);
//
//
//        $response = $this->post(route('api.constructions.store', ['api_token' => $this->token]), $langConstructor->toArray());
//        $response->assertStatus(200)->assertJsonStructure(
//            ['data' =>
//                ['id', 'name', 'description', 'type_code']
//            ]);
//
//    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function testShowConstructions()
    {

        $response = $this->getJson(route('api.constructions.show', ['constructions'=>$this->langConstructor->id,'api_token' => $this->token]));
        $response->assertStatus(200)->assertJsonStructure(
            ['data' =>
                ['id', 'name', 'description', 'type_code']
            ]);;

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

//    public function testUpdateConstructions()
//    {
//
//        $response = $this->getJson(route('api.constructions.show', ['constructions'=>$this->langConstructor->id,'api_token' => $this->token]));
//
//        $name = 'new name';
//        $data = json_decode($response->content(),true)['data'];
//        $data['name'] = $name;
//        $id = $data['id'];
//        unset($data['id']);
//
//
//        $response = $this->put(route('api.constructions.update', ['constructions'=> $id,'api_token' => $this->token]),$data);
//        $response->assertStatus(200)->assertJsonStructure(
//            ['data' =>
//                ['id', 'name', 'description', 'type_code']
//            ])->assertJsonFragment([
//            'name' => $name,
//        ]);
//
//    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function testDestroyConstructions()
    {

         $this->delete(route('api.constructions.destroy', ['constructions'=>$this->langConstructor->id,'api_token' => $this->token]));
         $response = $this->getJson(route('api.constructions.show', ['constructions'=>$this->langConstructor->id,'api_token' => $this->token]));
         $response->assertStatus(404);
    }
}
